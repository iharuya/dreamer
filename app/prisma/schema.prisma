// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  address      String        @id
  name         String?
  dreams       Dream[]
  DreamTickets DreamTicket[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

enum DreamStatus {
  PUBLISHED
  BANNED // when nsfw
  PENDING
  DRAFT
}

model Dream {
  id             Int          @id @default(autoincrement())
  title          String
  caption        String?
  prompt         String
  status         DreamStatus  @default(DRAFT)
  image          DreamImage?
  dreamer        Account      @relation(fields: [dreamerAddress], references: [address])
  dreamerAddress String
  ticket         DreamTicket?
  parent         Dream?       @relation("ParentChildren", fields: [parentId], references: [id])
  parentId       Int?
  children       Dream[]      @relation("ParentChildren")
  generation     Int          @default(1)
  publishedAt    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model DreamImage {
  id        Int      @id @default(autoincrement())
  filename  String
  dream     Dream    @relation(fields: [dreamId], references: [id])
  dreamId   Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum DreamTicketStatus {
  COMPLETED
  PROCESSING
  PENDING
}

model DreamTicket {
  id            String            @id // uint256 on the blockchain
  token         DreamToken        @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  tokenId       String
  expiresAt     Int // block number (uint256 but always less than Number.MAX_SAFE_INTEGER)
  status        DreamTicketStatus @default(PENDING)
  sender        Account           @relation(fields: [senderAddress], references: [address])
  senderAddress String
  signature     String
  dream         Dream             @relation(fields: [dreamId], references: [id])
  dreamId       Int               @unique
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt
}

model DreamToken {
  id        String        @id // ERC1155 tokenId (uint256)
  tickets   DreamTicket[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
}
